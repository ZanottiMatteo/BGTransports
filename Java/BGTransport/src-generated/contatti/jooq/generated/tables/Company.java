/*
 * This file is generated by jOOQ.
 */
package contatti.jooq.generated.tables;


import contatti.jooq.generated.DefaultSchema;
import contatti.jooq.generated.Keys;
import contatti.jooq.generated.tables.records.CompanyRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>COMPANY</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>COMPANY.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.legal_structure</code>.
     */
    public final TableField<CompanyRecord, String> LEGAL_STRUCTURE = createField(DSL.name("legal_structure"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.business_tax_code</code>.
     */
    public final TableField<CompanyRecord, String> BUSINESS_TAX_CODE = createField(DSL.name("business_tax_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.company_registration_number</code>.
     */
    public final TableField<CompanyRecord, String> COMPANY_REGISTRATION_NUMBER = createField(DSL.name("company_registration_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.incorporation_date</code>.
     */
    public final TableField<CompanyRecord, String> INCORPORATION_DATE = createField(DSL.name("incorporation_date"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.legal_representative</code>.
     */
    public final TableField<CompanyRecord, String> LEGAL_REPRESENTATIVE = createField(DSL.name("legal_representative"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.number_of_employees</code>.
     */
    public final TableField<CompanyRecord, String> NUMBER_OF_EMPLOYEES = createField(DSL.name("number_of_employees"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.ateco_code</code>.
     */
    public final TableField<CompanyRecord, String> ATECO_CODE = createField(DSL.name("ateco_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.registered_office</code>.
     */
    public final TableField<CompanyRecord, String> REGISTERED_OFFICE = createField(DSL.name("registered_office"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.province</code>.
     */
    public final TableField<CompanyRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.cap</code>.
     */
    public final TableField<CompanyRecord, String> CAP = createField(DSL.name("cap"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.address</code>.
     */
    public final TableField<CompanyRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.street_number</code>.
     */
    public final TableField<CompanyRecord, String> STREET_NUMBER = createField(DSL.name("street_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.telephone</code>.
     */
    public final TableField<CompanyRecord, String> TELEPHONE = createField(DSL.name("telephone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.mail</code>.
     */
    public final TableField<CompanyRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.social</code>.
     */
    public final TableField<CompanyRecord, String> SOCIAL = createField(DSL.name("social"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>COMPANY.web_site</code>.
     */
    public final TableField<CompanyRecord, String> WEB_SITE = createField(DSL.name("web_site"), SQLDataType.VARCHAR(255), this, "");

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>COMPANY</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>COMPANY</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    /**
     * Create a <code>COMPANY</code> table reference
     */
    public Company() {
        this(DSL.name("COMPANY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.COMPANY__PK_COMPANY;
    }

    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    @Override
    public Company as(Table<?> alias) {
        return new Company(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Table<?> name) {
        return new Company(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Condition condition) {
        return new Company(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
