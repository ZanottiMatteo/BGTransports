/*
 * This file is generated by jOOQ.
 */
package transportation.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import transportation.jooq.generated.DefaultSchema;
import transportation.jooq.generated.Keys;
import transportation.jooq.generated.tables.records.TramtimetableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tramtimetable extends TableImpl<TramtimetableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tramTimetable</code>
     */
    public static final Tramtimetable TRAMTIMETABLE = new Tramtimetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TramtimetableRecord> getRecordType() {
        return TramtimetableRecord.class;
    }

    /**
     * The column <code>tramTimetable.id</code>.
     */
    public final TableField<TramtimetableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tramTimetable.companyName</code>.
     */
    public final TableField<TramtimetableRecord, String> COMPANYNAME = createField(DSL.name("companyName"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.name</code>.
     */
    public final TableField<TramtimetableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.departureTramStation</code>.
     */
    public final TableField<TramtimetableRecord, String> DEPARTURETRAMSTATION = createField(DSL.name("departureTramStation"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.departureTime</code>.
     */
    public final TableField<TramtimetableRecord, String> DEPARTURETIME = createField(DSL.name("departureTime"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.arrivalTramStation</code>.
     */
    public final TableField<TramtimetableRecord, String> ARRIVALTRAMSTATION = createField(DSL.name("arrivalTramStation"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.arrivalTime</code>.
     */
    public final TableField<TramtimetableRecord, String> ARRIVALTIME = createField(DSL.name("arrivalTime"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.nextStop</code>.
     */
    public final TableField<TramtimetableRecord, String> NEXTSTOP = createField(DSL.name("nextStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.timeStop</code>.
     */
    public final TableField<TramtimetableRecord, String> TIMESTOP = createField(DSL.name("timeStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.type</code>.
     */
    public final TableField<TramtimetableRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.numberOfSeats</code>.
     */
    public final TableField<TramtimetableRecord, String> NUMBEROFSEATS = createField(DSL.name("numberOfSeats"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tramTimetable.numberOfCarriages</code>.
     */
    public final TableField<TramtimetableRecord, String> NUMBEROFCARRIAGES = createField(DSL.name("numberOfCarriages"), SQLDataType.VARCHAR(255), this, "");

    private Tramtimetable(Name alias, Table<TramtimetableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tramtimetable(Name alias, Table<TramtimetableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tramTimetable</code> table reference
     */
    public Tramtimetable(String alias) {
        this(DSL.name(alias), TRAMTIMETABLE);
    }

    /**
     * Create an aliased <code>tramTimetable</code> table reference
     */
    public Tramtimetable(Name alias) {
        this(alias, TRAMTIMETABLE);
    }

    /**
     * Create a <code>tramTimetable</code> table reference
     */
    public Tramtimetable() {
        this(DSL.name("tramTimetable"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TramtimetableRecord> getPrimaryKey() {
        return Keys.TRAMTIMETABLE__PK_TRAMTIMETABLE;
    }

    @Override
    public Tramtimetable as(String alias) {
        return new Tramtimetable(DSL.name(alias), this);
    }

    @Override
    public Tramtimetable as(Name alias) {
        return new Tramtimetable(alias, this);
    }

    @Override
    public Tramtimetable as(Table<?> alias) {
        return new Tramtimetable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tramtimetable rename(String name) {
        return new Tramtimetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tramtimetable rename(Name name) {
        return new Tramtimetable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tramtimetable rename(Table<?> name) {
        return new Tramtimetable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable where(Condition condition) {
        return new Tramtimetable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tramtimetable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tramtimetable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tramtimetable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tramtimetable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tramtimetable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
