/*
 * This file is generated by jOOQ.
 */
package transportation.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import transportation.jooq.generated.DefaultSchema;
import transportation.jooq.generated.Keys;
import transportation.jooq.generated.tables.records.DriverRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Driver extends TableImpl<DriverRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DRIVER</code>
     */
    public static final Driver DRIVER = new Driver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriverRecord> getRecordType() {
        return DriverRecord.class;
    }

    /**
     * The column <code>DRIVER.id</code>.
     */
    public final TableField<DriverRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.surname</code>.
     */
    public final TableField<DriverRecord, String> SURNAME = createField(DSL.name("surname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.name</code>.
     */
    public final TableField<DriverRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.fiscal_code</code>.
     */
    public final TableField<DriverRecord, String> FISCAL_CODE = createField(DSL.name("fiscal_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.address</code>.
     */
    public final TableField<DriverRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.street_number</code>.
     */
    public final TableField<DriverRecord, String> STREET_NUMBER = createField(DSL.name("street_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.town</code>.
     */
    public final TableField<DriverRecord, String> TOWN = createField(DSL.name("town"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.province</code>.
     */
    public final TableField<DriverRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.cap</code>.
     */
    public final TableField<DriverRecord, String> CAP = createField(DSL.name("cap"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.date_of_birth</code>.
     */
    public final TableField<DriverRecord, String> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.place_of_birth</code>.
     */
    public final TableField<DriverRecord, String> PLACE_OF_BIRTH = createField(DSL.name("place_of_birth"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.telephone</code>.
     */
    public final TableField<DriverRecord, String> TELEPHONE = createField(DSL.name("telephone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.mail</code>.
     */
    public final TableField<DriverRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.social</code>.
     */
    public final TableField<DriverRecord, String> SOCIAL = createField(DSL.name("social"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>DRIVER.web_site</code>.
     */
    public final TableField<DriverRecord, String> WEB_SITE = createField(DSL.name("web_site"), SQLDataType.VARCHAR(255), this, "");

    private Driver(Name alias, Table<DriverRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Driver(Name alias, Table<DriverRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DRIVER</code> table reference
     */
    public Driver(String alias) {
        this(DSL.name(alias), DRIVER);
    }

    /**
     * Create an aliased <code>DRIVER</code> table reference
     */
    public Driver(Name alias) {
        this(alias, DRIVER);
    }

    /**
     * Create a <code>DRIVER</code> table reference
     */
    public Driver() {
        this(DSL.name("DRIVER"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DriverRecord> getPrimaryKey() {
        return Keys.DRIVER__PK_DRIVER;
    }

    @Override
    public Driver as(String alias) {
        return new Driver(DSL.name(alias), this);
    }

    @Override
    public Driver as(Name alias) {
        return new Driver(alias, this);
    }

    @Override
    public Driver as(Table<?> alias) {
        return new Driver(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(String name) {
        return new Driver(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(Name name) {
        return new Driver(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Driver rename(Table<?> name) {
        return new Driver(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver where(Condition condition) {
        return new Driver(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Driver where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Driver where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Driver where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Driver where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Driver whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
