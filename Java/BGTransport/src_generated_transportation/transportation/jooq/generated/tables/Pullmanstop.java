/*
 * This file is generated by jOOQ.
 */
package transportation.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import transportation.jooq.generated.DefaultSchema;
import transportation.jooq.generated.Keys;
import transportation.jooq.generated.tables.records.PullmanstopRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pullmanstop extends TableImpl<PullmanstopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pullmanStop</code>
     */
    public static final Pullmanstop PULLMANSTOP = new Pullmanstop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PullmanstopRecord> getRecordType() {
        return PullmanstopRecord.class;
    }

    /**
     * The column <code>pullmanStop.name</code>.
     */
    public final TableField<PullmanstopRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanStop.town</code>.
     */
    public final TableField<PullmanstopRecord, String> TOWN = createField(DSL.name("town"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanStop.province</code>.
     */
    public final TableField<PullmanstopRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanStop.lat</code>.
     */
    public final TableField<PullmanstopRecord, String> LAT = createField(DSL.name("lat"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanStop.lon</code>.
     */
    public final TableField<PullmanstopRecord, String> LON = createField(DSL.name("lon"), SQLDataType.VARCHAR(255), this, "");

    private Pullmanstop(Name alias, Table<PullmanstopRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pullmanstop(Name alias, Table<PullmanstopRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pullmanStop</code> table reference
     */
    public Pullmanstop(String alias) {
        this(DSL.name(alias), PULLMANSTOP);
    }

    /**
     * Create an aliased <code>pullmanStop</code> table reference
     */
    public Pullmanstop(Name alias) {
        this(alias, PULLMANSTOP);
    }

    /**
     * Create a <code>pullmanStop</code> table reference
     */
    public Pullmanstop() {
        this(DSL.name("pullmanStop"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PullmanstopRecord> getPrimaryKey() {
        return Keys.PULLMANSTOP__PK_PULLMANSTOP;
    }

    @Override
    public Pullmanstop as(String alias) {
        return new Pullmanstop(DSL.name(alias), this);
    }

    @Override
    public Pullmanstop as(Name alias) {
        return new Pullmanstop(alias, this);
    }

    @Override
    public Pullmanstop as(Table<?> alias) {
        return new Pullmanstop(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmanstop rename(String name) {
        return new Pullmanstop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmanstop rename(Name name) {
        return new Pullmanstop(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmanstop rename(Table<?> name) {
        return new Pullmanstop(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop where(Condition condition) {
        return new Pullmanstop(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmanstop where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmanstop where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmanstop where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmanstop where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmanstop whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
