/*
 * This file is generated by jOOQ.
 */
package transportation.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import transportation.jooq.generated.DefaultSchema;
import transportation.jooq.generated.Keys;
import transportation.jooq.generated.tables.records.CompanyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>company.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.legalStructure</code>.
     */
    public final TableField<CompanyRecord, String> LEGALSTRUCTURE = createField(DSL.name("legalStructure"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.businessTaxCode</code>.
     */
    public final TableField<CompanyRecord, String> BUSINESSTAXCODE = createField(DSL.name("businessTaxCode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.companyRegistrationNumber</code>.
     */
    public final TableField<CompanyRecord, String> COMPANYREGISTRATIONNUMBER = createField(DSL.name("companyRegistrationNumber"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.incorporationDate</code>.
     */
    public final TableField<CompanyRecord, String> INCORPORATIONDATE = createField(DSL.name("incorporationDate"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.legalRepresentative</code>.
     */
    public final TableField<CompanyRecord, String> LEGALREPRESENTATIVE = createField(DSL.name("legalRepresentative"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.numberOfEmployees</code>.
     */
    public final TableField<CompanyRecord, String> NUMBEROFEMPLOYEES = createField(DSL.name("numberOfEmployees"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.atecoCode</code>.
     */
    public final TableField<CompanyRecord, String> ATECOCODE = createField(DSL.name("atecoCode"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.registeredOffice</code>.
     */
    public final TableField<CompanyRecord, String> REGISTEREDOFFICE = createField(DSL.name("registeredOffice"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.province</code>.
     */
    public final TableField<CompanyRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.cap</code>.
     */
    public final TableField<CompanyRecord, String> CAP = createField(DSL.name("cap"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.address</code>.
     */
    public final TableField<CompanyRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.streetNumber</code>.
     */
    public final TableField<CompanyRecord, String> STREETNUMBER = createField(DSL.name("streetNumber"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.telephone</code>.
     */
    public final TableField<CompanyRecord, String> TELEPHONE = createField(DSL.name("telephone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.mail</code>.
     */
    public final TableField<CompanyRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.social</code>.
     */
    public final TableField<CompanyRecord, String> SOCIAL = createField(DSL.name("social"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>company.webSite</code>.
     */
    public final TableField<CompanyRecord, String> WEBSITE = createField(DSL.name("webSite"), SQLDataType.VARCHAR(255), this, "");

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>company</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>company</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    /**
     * Create a <code>company</code> table reference
     */
    public Company() {
        this(DSL.name("company"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.COMPANY__PK_COMPANY;
    }

    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    @Override
    public Company as(Table<?> alias) {
        return new Company(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Table<?> name) {
        return new Company(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Condition condition) {
        return new Company(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Company where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Company whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
