/*
 * This file is generated by jOOQ.
 */
package transportation.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import transportation.jooq.generated.DefaultSchema;
import transportation.jooq.generated.Keys;
import transportation.jooq.generated.tables.records.PullmantimetableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pullmantimetable extends TableImpl<PullmantimetableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pullmanTimetable</code>
     */
    public static final Pullmantimetable PULLMANTIMETABLE = new Pullmantimetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PullmantimetableRecord> getRecordType() {
        return PullmantimetableRecord.class;
    }

    /**
     * The column <code>pullmanTimetable.id</code>.
     */
    public final TableField<PullmantimetableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pullmanTimetable.companyName</code>.
     */
    public final TableField<PullmantimetableRecord, String> COMPANYNAME = createField(DSL.name("companyName"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.line</code>.
     */
    public final TableField<PullmantimetableRecord, String> LINE = createField(DSL.name("line"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.departurePullmanStop</code>.
     */
    public final TableField<PullmantimetableRecord, String> DEPARTUREPULLMANSTOP = createField(DSL.name("departurePullmanStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.departureTime</code>.
     */
    public final TableField<PullmantimetableRecord, String> DEPARTURETIME = createField(DSL.name("departureTime"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.arrivalPullmanStop</code>.
     */
    public final TableField<PullmantimetableRecord, String> ARRIVALPULLMANSTOP = createField(DSL.name("arrivalPullmanStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.arrivalTime</code>.
     */
    public final TableField<PullmantimetableRecord, String> ARRIVALTIME = createField(DSL.name("arrivalTime"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.nextStop</code>.
     */
    public final TableField<PullmantimetableRecord, String> NEXTSTOP = createField(DSL.name("nextStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.timeStop</code>.
     */
    public final TableField<PullmantimetableRecord, String> TIMESTOP = createField(DSL.name("timeStop"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pullmanTimetable.type</code>.
     */
    public final TableField<PullmantimetableRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    private Pullmantimetable(Name alias, Table<PullmantimetableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pullmantimetable(Name alias, Table<PullmantimetableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pullmanTimetable</code> table reference
     */
    public Pullmantimetable(String alias) {
        this(DSL.name(alias), PULLMANTIMETABLE);
    }

    /**
     * Create an aliased <code>pullmanTimetable</code> table reference
     */
    public Pullmantimetable(Name alias) {
        this(alias, PULLMANTIMETABLE);
    }

    /**
     * Create a <code>pullmanTimetable</code> table reference
     */
    public Pullmantimetable() {
        this(DSL.name("pullmanTimetable"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PullmantimetableRecord> getPrimaryKey() {
        return Keys.PULLMANTIMETABLE__PK_PULLMANTIMETABLE;
    }

    @Override
    public Pullmantimetable as(String alias) {
        return new Pullmantimetable(DSL.name(alias), this);
    }

    @Override
    public Pullmantimetable as(Name alias) {
        return new Pullmantimetable(alias, this);
    }

    @Override
    public Pullmantimetable as(Table<?> alias) {
        return new Pullmantimetable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmantimetable rename(String name) {
        return new Pullmantimetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmantimetable rename(Name name) {
        return new Pullmantimetable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pullmantimetable rename(Table<?> name) {
        return new Pullmantimetable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable where(Condition condition) {
        return new Pullmantimetable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmantimetable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmantimetable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmantimetable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pullmantimetable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pullmantimetable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
